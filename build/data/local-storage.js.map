{"version":3,"names":["React","AtrcDataLocalStorageGetSettings","localStorageKey","data","window","localStorage","getItem","cookies","document","cookie","split","i","length","cookieName","substring","indexOf","cookieValue","trim","settings","JSON","parse","err","AtrcDataLocalStorageSaveSettings","expires","arguments","undefined","stringifiedData","stringify","AtrcDataLocalStorageRemoveSettings","setItem","date","Date","setTime","getTime","expiresStr","toUTCString","key","removeItem"],"sources":["D:/wamp/www/atrc-package/atrc/packages/data/local-storage.js"],"sourcesContent":["import React from 'react';\n\n/**\r\n * Get settings from local storage or a cookie based on the provided key.\r\n *\r\n * @param {string} localStorageKey - The key used to retrieve the settings.\r\n * @return {Object} An object containing the retrieved settings.\r\n *\r\n * Example:\r\n *\r\n * // Given localStorageKey: 'userSettings'\r\n * const settingsData = AtrcDataLocalStorageGetSettings('userSettings');\r\n * console.log(settingsData);\r\n * // Output: { settings: { /* Retrieved settings object /* } }\r\n */\r\nexport const AtrcDataLocalStorageGetSettings = (localStorageKey) => {\r\n\tlet data = null;\r\n\r\n\t// Check if localStorage is available in the current environment\r\n\tif (typeof window !== 'undefined' && 'localStorage' in window) {\r\n\t\t// Try to get the settings from local storage\r\n\t\tdata = localStorage.getItem(localStorageKey);\r\n\t} else {\r\n\t\t// If local storage is not available, try to get the settings from a cookie\r\n\t\tconst cookies = document.cookie.split(';');\r\n\t\tfor (let i = 0; i < cookies.length; i++) {\r\n\t\t\tconst cookie = cookies[i];\r\n\t\t\tconst cookieName = cookie.substring(0, cookie.indexOf('='));\r\n\t\t\tconst cookieValue = cookie.substring(cookie.indexOf('=') + 1);\r\n\t\t\tif (cookieName.trim() === localStorageKey) {\r\n\t\t\t\tdata = cookieValue;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\ttry {\r\n\t\t// Try to parse the retrieved data as JSON\r\n\t\treturn { settings: JSON.parse(data) };\r\n\t} catch (err) {\r\n\t\t// If parsing fails, return the data as is\r\n\t\treturn { settings: data };\r\n\t}\r\n};\r\n\r\n/**\r\n * Save settings to local storage or a cookie based on the provided key.\r\n *\r\n * @param {string} localStorageKey - The key used to save the settings.\r\n * @param {Object} data            - The settings data to be saved.\r\n * @param {number} expires         - Number of days until the data expires (default: 365 days).\r\n * @return {Object} An object containing the saved settings.\r\n *\r\n * Example:\r\n *\r\n * // Given localStorageKey: 'userSettings', data: { theme: 'dark', language: 'en' }\r\n * const savedSettings = AtrcDataLocalStorageSaveSettings('userSettings', { theme: 'dark', language: 'en' });\r\n * console.log(savedSettings);\r\n * // Output: { settings: { theme: 'dark', language: 'en' } }\r\n */\r\nexport const AtrcDataLocalStorageSaveSettings = (\r\n\tlocalStorageKey,\r\n\tdata,\r\n\texpires = 365\r\n) => {\r\n\tconst stringifiedData = JSON.stringify(data);\r\n\r\n\t// If the data is empty, remove the settings\r\n\tif (!stringifiedData) {\r\n\t\treturn AtrcDataLocalStorageRemoveSettings(localStorageKey);\r\n\t} else if (typeof window !== 'undefined' && 'localStorage' in window) {\r\n\t\t// Try to save the settings to local storage\r\n\t\tlocalStorage.setItem(localStorageKey, stringifiedData);\r\n\t} else {\r\n\t\t// If local storage is not available, try to save the settings to a cookie\r\n\t\tconst date = new Date();\r\n\t\tdate.setTime(date.getTime() + expires * 24 * 60 * 60 * 1000); // expire after the specified number of days\r\n\t\tconst expiresStr = '; expires=' + date.toUTCString();\r\n\t\tdocument.cookie =\r\n\t\t\tlocalStorageKey + '=' + stringifiedData + expiresStr + '; path=/';\r\n\t}\r\n\r\n\t// Retrieve and return the saved settings\r\n\treturn AtrcDataLocalStorageGetSettings(localStorageKey);\r\n};\r\n\r\n/**\r\n * Remove settings from local storage or a cookie based on the provided key.\r\n *\r\n * @param {string} key - The key used to remove the settings.\r\n * @return {Object} An empty object indicating that the settings have been removed.\r\n *\r\n * Example:\r\n *\r\n * // Given key: 'userSettings'\r\n * const removedSettings = AtrcDataLocalStorageRemoveSettings('userSettings');\r\n * console.log(removedSettings);\r\n * // Output: {}\r\n */\r\nconst AtrcDataLocalStorageRemoveSettings = (key) => {\r\n\t// Check if localStorage is available in the current environment\r\n\tif (typeof window !== 'undefined' && 'localStorage' in window) {\r\n\t\t// Remove the settings from local storage\r\n\t\tlocalStorage.removeItem(key);\r\n\t} else {\r\n\t\t// If local storage is not available, remove the settings from a cookie\r\n\t\tconst date = new Date();\r\n\t\tdate.setTime(date.getTime() - 1);\r\n\t\tconst expires = '; expires=' + date.toUTCString();\r\n\t\tdocument.cookie = key + '=' + '' + expires + '; path=/';\r\n\t}\r\n\r\n\t// Return an empty object indicating that the settings have been removed\r\n\treturn {};\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,+BAA+B,GAAG,SAAlCA,+BAA+BA,CAAIC,eAAe,EAAK;EACnE,IAAIC,IAAI,GAAG,IAAI;;EAEf;EACA,IAAI,OAAOC,MAAM,KAAK,WAAW,IAAI,cAAc,IAAIA,MAAM,EAAE;IAC9D;IACAD,IAAI,GAAGE,YAAY,CAACC,OAAO,CAACJ,eAAe,CAAC;EAC7C,CAAC,MAAM;IACN;IACA,IAAMK,OAAO,GAAGC,QAAQ,CAACC,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC;IAC1C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,OAAO,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;MACxC,IAAMF,MAAM,GAAGF,OAAO,CAACI,CAAC,CAAC;MACzB,IAAME,UAAU,GAAGJ,MAAM,CAACK,SAAS,CAAC,CAAC,EAAEL,MAAM,CAACM,OAAO,CAAC,GAAG,CAAC,CAAC;MAC3D,IAAMC,WAAW,GAAGP,MAAM,CAACK,SAAS,CAACL,MAAM,CAACM,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MAC7D,IAAIF,UAAU,CAACI,IAAI,CAAC,CAAC,KAAKf,eAAe,EAAE;QAC1CC,IAAI,GAAGa,WAAW;QAClB;MACD;IACD;EACD;EAEA,IAAI;IACH;IACA,OAAO;MAAEE,QAAQ,EAAEC,IAAI,CAACC,KAAK,CAACjB,IAAI;IAAE,CAAC;EACtC,CAAC,CAAC,OAAOkB,GAAG,EAAE;IACb;IACA,OAAO;MAAEH,QAAQ,EAAEf;IAAK,CAAC;EAC1B;AACD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMmB,gCAAgC,GAAG,SAAnCA,gCAAgCA,CAC5CpB,eAAe,EACfC,IAAI,EAEA;EAAA,IADJoB,OAAO,GAAAC,SAAA,CAAAZ,MAAA,QAAAY,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,GAAG;EAEb,IAAME,eAAe,GAAGP,IAAI,CAACQ,SAAS,CAACxB,IAAI,CAAC;;EAE5C;EACA,IAAI,CAACuB,eAAe,EAAE;IACrB,OAAOE,kCAAkC,CAAC1B,eAAe,CAAC;EAC3D,CAAC,MAAM,IAAI,OAAOE,MAAM,KAAK,WAAW,IAAI,cAAc,IAAIA,MAAM,EAAE;IACrE;IACAC,YAAY,CAACwB,OAAO,CAAC3B,eAAe,EAAEwB,eAAe,CAAC;EACvD,CAAC,MAAM;IACN;IACA,IAAMI,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC;IACvBD,IAAI,CAACE,OAAO,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,GAAGV,OAAO,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;IAC9D,IAAMW,UAAU,GAAG,YAAY,GAAGJ,IAAI,CAACK,WAAW,CAAC,CAAC;IACpD3B,QAAQ,CAACC,MAAM,GACdP,eAAe,GAAG,GAAG,GAAGwB,eAAe,GAAGQ,UAAU,GAAG,UAAU;EACnE;;EAEA;EACA,OAAOjC,+BAA+B,CAACC,eAAe,CAAC;AACxD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAM0B,kCAAkC,GAAG,SAArCA,kCAAkCA,CAAIQ,GAAG,EAAK;EACnD;EACA,IAAI,OAAOhC,MAAM,KAAK,WAAW,IAAI,cAAc,IAAIA,MAAM,EAAE;IAC9D;IACAC,YAAY,CAACgC,UAAU,CAACD,GAAG,CAAC;EAC7B,CAAC,MAAM;IACN;IACA,IAAMN,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC;IACvBD,IAAI,CAACE,OAAO,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;IAChC,IAAMV,OAAO,GAAG,YAAY,GAAGO,IAAI,CAACK,WAAW,CAAC,CAAC;IACjD3B,QAAQ,CAACC,MAAM,GAAG2B,GAAG,GAAG,GAAG,GAAG,EAAE,GAAGb,OAAO,GAAG,UAAU;EACxD;;EAEA;EACA,OAAO,CAAC,CAAC;AACV,CAAC","ignoreList":[]}