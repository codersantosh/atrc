{"version":3,"names":["addQueryArgs","cloneDeep","isObject","map","AtrcStore","AtrcRemoveQueryFromUrl","_ref","_ref$currentUrl","currentUrl","window","location","href","search","length","newUrl","split","AtrcRemoveUrlArg","url","urlKey","escapedKey","replace","regex","RegExp","concat","AtrcAddUrlArg","urlVal","encodedKey","encodeURIComponent","encodedVal","keyExists","includes","separator","endsWith","AtrcRemoveLeadingSlash","str","AtrcRemoveTrailingSlash","AtrcGetUrlArgValue","path","key","_path","parts","index","indexOf","AtrcRemoveObjectEmptyValues","obj","newObject","undefined","AtrcGetQueryParams","hash","newHash","substring","_location","params","URLSearchParams","_AtrcStore$DEFAULT_ST","DEFAULT_STATE","allowedParams","queryParams","defaultQueryArgs","CACHE_STATE","queryArgs","allowedParamsObject","forEach","param","has","getAll","get","pVal","pKey","type","newParamVal","_objectSpread","AtrcGetandSetQueryParams","updateParams","arguments","_location2","_AtrcStore$DEFAULT_ST2","mergeArgs","Object","fromEntries","entries","filter","_ref2","_ref3","_slicedToArray","value","hasOwnProperty","keys","set","delete","toString","history","replaceState","document","title","decodeURI","getNormalizedCommaSeparable","Array","isArray","AtrcGetQueryParts","query","queryKey","page","perPage","fields","include","sort","i","join","_defineProperty","slice","AtrcObjAddFlushedKey","AtrcFlushCache","cache","AtrcIsFlushed","data"],"sources":["D:/wamp/www/atrc-package/atrc/packages/data/utils.js"],"sourcesContent":["/* WordPress */\r\nimport { addQueryArgs } from '@wordpress/url';\r\n\r\n/* Library */\r\nimport { cloneDeep, isObject, map } from 'lodash';\r\n\r\n/* Internal */\r\nimport { AtrcStore } from './store';\r\n\r\n/**\r\n * Remove query parameters from a URL.\r\n *\r\n * @param {Object} options            - The options object.\r\n * @param {string} options.currentUrl - The current URL to process (optional).\r\n * @return {string} The URL without query parameters.\r\n *\r\n * Example:\r\n *\r\n * // Given current URL: 'acmeit.org/blogs/page/2?sort=latest'\r\n * const urlWithoutParams = AtrcRemoveQueryFromUrl({ currentUrl: 'acmeit.org/blogs/page/2?sort=latest' });\r\n * console.log(urlWithoutParams); // Output: 'acmeit.org/blogs/page/2'\r\n */\r\nexport const AtrcRemoveQueryFromUrl = ({ currentUrl = '' }) => {\r\n\tif (!currentUrl) {\r\n\t\tcurrentUrl = window.location.href;\r\n\t}\r\n\r\n\t// Check if there are query parameters\r\n\tif (window.location.search.length > 0) {\r\n\t\t// Remove query parameters by replacing the URL\r\n\t\tconst newUrl = currentUrl.split('?')[0];\r\n\t\treturn newUrl;\r\n\t}\r\n\treturn currentUrl;\r\n};\r\n\r\n/**\r\n * Remove a specific segment from the URL path.\r\n *\r\n * @param {string} url    - The URL to process.\r\n * @param {string} urlKey - The key of the segment to remove.\r\n * @return {string} The modified URL without the specified segment.\r\n *\r\n * Example:\r\n *\r\n * // Given URL: 'acmeit.org/blogs/page/2'\r\n * const urlWithoutPage = AtrcRemoveUrlArg('acmeit.org/blogs/page/2', 'page');\r\n * console.log(urlWithoutPage); // Output: 'acmeit.org/blogs'\r\n */\r\nexport const AtrcRemoveUrlArg = (url, urlKey) => {\r\n\t// Escape special characters in the key for creating a regular expression\r\n\tconst escapedKey = urlKey.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n\r\n\t// Create a regular expression to match the key at the end of the URL path\r\n\tconst regex = new RegExp(`\\\\/${escapedKey}(\\\\/\\\\d*)?$`, 'g');\r\n\r\n\t// Use the regular expression to remove the key and its value from the URL\r\n\tconst newUrl = url.replace(regex, '');\r\n\r\n\treturn newUrl;\r\n};\r\n\r\n/**\r\n * Add a new segment to the URL path with a given key and value.\r\n *\r\n * @param {string} url    - The URL to process.\r\n * @param {string} urlKey - The key of the segment to add.\r\n * @param {string} urlVal - The value of the segment to add.\r\n * @return {string} The modified URL with the added segment.\r\n *\r\n * Example:\r\n *\r\n * // Given URL: 'acmeit.org/blogs'\r\n * const urlWithCategory = AtrcAddUrlArg('acmeit.org/blogs', 'category', 'tech');\r\n * console.log(urlWithCategory); // Output: 'acmeit.org/blogs/category/tech'\r\n */\r\nexport const AtrcAddUrlArg = (url, urlKey, urlVal) => {\r\n\t// Encode the key and value to ensure proper URL formatting\r\n\tconst encodedKey = encodeURIComponent(urlKey);\r\n\tconst encodedVal = encodeURIComponent(urlVal);\r\n\r\n\t// Check if the key already exists in the URL\r\n\tconst keyExists = url.includes(`/${encodedKey}/`);\r\n\r\n\t// Create the new URL with the added or updated path segment\r\n\tlet newUrl;\r\n\tif (keyExists) {\r\n\t\t// If the key exists, update the existing value\r\n\t\tconst regex = new RegExp(`(${encodedKey}/)[^/]*`);\r\n\t\tnewUrl = url.replace(regex, `$1${encodedVal}`);\r\n\t} else {\r\n\t\t// If the key doesn't exist, append the new path segment\r\n\t\tconst separator = url.endsWith('/') ? '' : '/';\r\n\t\tnewUrl = `${url}${separator}${encodedKey}/${encodedVal}`;\r\n\t}\r\n\r\n\treturn newUrl;\r\n};\r\n\r\n/**\r\n * Remove the first '/' from a string if it exists.\r\n *\r\n * @param {string} str - URL or URL part.\r\n * @return {string} The string without the leading '/'.\r\n *\r\n * Example:\r\n *\r\n * // Given string: '/blogs'\r\n * const strWithoutLeadingSlash = AtrcRemoveLeadingSlash('/blogs');\r\n * console.log(strWithoutLeadingSlash); // Output: 'blogs'\r\n */\r\nexport const AtrcRemoveLeadingSlash = (str) => {\r\n\treturn str.replace(/^\\//, '');\r\n};\r\n\r\n/**\r\n * Remove the last '/' from a string if it exists.\r\n *\r\n * @param {string} str - URL or URL part.\r\n * @return {string} The string without the trailing '/'.\r\n *\r\n * Example:\r\n *\r\n * // Given string: 'blogs/'\r\n * const strWithoutTrailingSlash = AtrcRemoveTrailingSlash('blogs/');\r\n * console.log(strWithoutTrailingSlash); // Output: 'blogs'\r\n */\r\nexport const AtrcRemoveTrailingSlash = (str) => {\r\n\treturn str.replace(/\\/$/, '');\r\n};\r\n\r\n/**\r\n * Retrieve a given key from the URL path.\r\n * A query string will take precedence; otherwise, it will fall back to the value in the path.\r\n * For example, in '/category/blog/page/2', the value for category is blog, and page is 2.\r\n * This could also be written as `?category=blog&page=2` or `/category/blog/?page=2`.\r\n *\r\n * @param {string} path - A URL path and query string.\r\n * @param {string} key  - The query var to extract, e.g., `categories`, `page`.\r\n * @return {string} The value of the requested key.\r\n *\r\n * Example:\r\n *\r\n * // Given URL path: 'acmeit.org/blogs/category/tech/page/2'\r\n * const categoryValue = getValueFromPath('acmeit.org/blogs/category/tech/page/2', 'category');\r\n * console.log(categoryValue); // Output: 'tech'\r\n */\r\nexport const AtrcGetUrlArgValue = (path, key) => {\r\n\tif (!key || !path) {\r\n\t\treturn '';\r\n\t}\r\n\r\n\t// Remove leading and trailing slashes\r\n\tconst _path = AtrcRemoveLeadingSlash(AtrcRemoveTrailingSlash(path));\r\n\r\n\t// Split the path into parts\r\n\tconst parts = _path.split('/');\r\n\r\n\t// Find the key section, if it exists. The next part of the URL is the value.\r\n\tconst index = parts.indexOf(key);\r\n\tif (index === -1 || index === parts.length - 1) {\r\n\t\treturn '';\r\n\t}\r\n\r\n\treturn parts[index + 1] || '';\r\n};\r\n\r\n/**\r\n * Removes key-value pairs from an object where the value is considered empty.\r\n *\r\n * @param {Object} obj - The input object.\r\n * @returns {Object} - A new object with empty values removed. The input object remains unchanged.\r\n */\r\nexport function AtrcRemoveObjectEmptyValues(obj) {\r\n\tif (!isObject(obj)) {\r\n\t\treturn obj;\r\n\t}\r\n\r\n\tconst newObject = cloneDeep(obj);\r\n\r\n\tfor (let key in newObject) {\r\n\t\t// Check if the value is empty (empty string, null, or undefined)\r\n\t\tif (\r\n\t\t\tnewObject[key] === '' ||\r\n\t\t\tnewObject[key] === null ||\r\n\t\t\tnewObject[key] === undefined\r\n\t\t) {\r\n\t\t\t// Delete the key-value pair\r\n\t\t\tdelete newObject[key];\r\n\t\t}\r\n\t}\r\n\r\n\treturn newObject;\r\n}\r\n\r\n/**\r\n * Get and set query parameters in the URL based on the provided key and updateParams.\r\n *\r\n * @param {string} key          - The key used to identify the query parameters configuration.\r\n * @param {Object} updateParams - The parameters to update or add to the URL (default: {}).\r\n * @return {Object} An object containing the updated or added query parameters.\r\n *\r\n * Example:\r\n *\r\n * // Given key: 'userSettings'\r\n * const updatedQueryParams = AtrcGetandSetQueryParams('userSettings');\r\n * console.log(updatedQueryParams);\r\n * // Output: { theme: 'dark', language: 'en' }\r\n */\r\nexport function AtrcGetQueryParams(key) {\r\n\t// Get the current URL\r\n\tconst currentUrl = window.location.href;\r\n\r\n\t// Remove existing query parameters from the URL\r\n\tlet newUrl = '';\r\n\tif (window.location.hash) {\r\n\t\tif (window.location.hash.indexOf('?') !== -1) {\r\n\t\t\tconst newHash = window.location.hash.split('?')[0];\r\n\t\t\tnewUrl = currentUrl.replace(window.location.hash, newHash);\r\n\t\t}\r\n\t} else {\r\n\t\tnewUrl = AtrcRemoveQueryFromUrl({ currentUrl });\r\n\t}\r\n\r\n\tlet search;\r\n\r\n\t// Determine the search part of the URL based on the presence of a hash\r\n\tif (location.hash) {\r\n\t\tsearch =\r\n\t\t\tlocation.hash.indexOf('?') === -1\r\n\t\t\t\t? ''\r\n\t\t\t\t: location.hash.substring(location.hash.indexOf('?') + 1);\r\n\t} else {\r\n\t\t({ search } = location);\r\n\t}\r\n\r\n\t// Parse the search parameters\r\n\tconst params = new URLSearchParams(search);\r\n\r\n\t// Extract allowed and specified query parameters from the registred store.\r\n\tconst { allowedParams, queryParams } = AtrcStore.DEFAULT_STATE[key];\r\n\tconst { queryArgs: defaultQueryArgs } = AtrcStore.CACHE_STATE[key];\r\n\r\n\tconst allowedParamsObject = {};\r\n\tif (allowedParams) {\r\n\t\tallowedParams.forEach(function (param) {\r\n\t\t\tif (params.has(param)) {\r\n\t\t\t\tallowedParamsObject[param] =\r\n\t\t\t\t\tparams.getAll(param)[1] || params.get(param);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// Process queryParams with type 'url' and update newUrl accordingly\r\n\tif (queryParams) {\r\n\t\tmap(queryParams, (pVal, pKey) => {\r\n\t\t\tif (pVal && pVal.type === 'url') {\r\n\t\t\t\tconst newParamVal = AtrcGetUrlArgValue(newUrl, pKey);\r\n\t\t\t\tif (newParamVal) {\r\n\t\t\t\t\tallowedParamsObject[pKey] = newParamVal;\r\n\t\t\t\t}\r\n\t\t\t\tnewUrl = AtrcRemoveUrlArg(newUrl, pKey);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tconst queryArgs = {\r\n\t\t...defaultQueryArgs,\r\n\t\t...allowedParamsObject,\r\n\t};\r\n\treturn queryArgs;\r\n}\r\n\r\n/**\r\n * Get and set query parameters in the URL based on the provided key and updateParams.\r\n *\r\n * @param {string} key          - The key used to identify the query parameters configuration.\r\n * @param {Object} updateParams - The parameters to update or add to the URL (default: {}).\r\n * @return {Object} An object containing the updated or added query parameters.\r\n *\r\n * Example:\r\n *\r\n * // Given key: 'userSettings', updateParams: { theme: 'dark', language: 'en' }\r\n * const updatedQueryParams = AtrcGetandSetQueryParams('userSettings', { theme: 'dark', language: 'en' });\r\n * console.log(updatedQueryParams);\r\n * // Output: { theme: 'dark', language: 'en' }\r\n */\r\nexport function AtrcGetandSetQueryParams(key, updateParams = {}) {\r\n\t// Get the current URL\r\n\tconst currentUrl = window.location.href;\r\n\r\n\t// Remove existing query parameters from the URL\r\n\tlet newUrl = '';\r\n\tif (window.location.hash) {\r\n\t\tif (window.location.hash.indexOf('?') !== -1) {\r\n\t\t\tconst newHash = window.location.hash.split('?')[0];\r\n\t\t\tnewUrl = currentUrl.replace(window.location.hash, newHash);\r\n\t\t} else {\r\n\t\t\tnewUrl = currentUrl;\r\n\t\t}\r\n\t} else {\r\n\t\tnewUrl = AtrcRemoveQueryFromUrl({ currentUrl });\r\n\t}\r\n\r\n\tlet search;\r\n\r\n\t// Determine the search part of the URL based on the presence of a hash\r\n\tif (location.hash) {\r\n\t\tsearch =\r\n\t\t\tlocation.hash.indexOf('?') === -1\r\n\t\t\t\t? ''\r\n\t\t\t\t: location.hash.substring(location.hash.indexOf('?') + 1);\r\n\t} else {\r\n\t\t({ search } = location);\r\n\t}\r\n\r\n\t// Parse the search parameters\r\n\tconst params = new URLSearchParams(search);\r\n\r\n\t// Extract allowed and specified query parameters from the registred store.\r\n\tconst { allowedParams, queryParams } = AtrcStore.DEFAULT_STATE[key];\r\n\tconst { queryArgs: defaultQueryArgs } = AtrcStore.CACHE_STATE[key];\r\n\r\n\tconst allowedParamsObject = {};\r\n\tif (allowedParams) {\r\n\t\tallowedParams.forEach(function (param) {\r\n\t\t\tif (params.has(param)) {\r\n\t\t\t\tallowedParamsObject[param] =\r\n\t\t\t\t\tparams.getAll(param)[1] || params.get(param);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// Process queryParams with type 'url' and update newUrl accordingly\r\n\tif (queryParams) {\r\n\t\tmap(queryParams, (pVal, pKey) => {\r\n\t\t\tif (pVal && pVal.type === 'url') {\r\n\t\t\t\tconst newParamVal = AtrcGetUrlArgValue(newUrl, pKey);\r\n\t\t\t\tif (newParamVal) {\r\n\t\t\t\t\tallowedParamsObject[pKey] = newParamVal;\r\n\t\t\t\t}\r\n\t\t\t\tnewUrl = AtrcRemoveUrlArg(newUrl, pKey);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// Merge allowedParamsObject with updateParams\r\n\tconst mergeArgs = {\r\n\t\t...defaultQueryArgs,\r\n\t\t...allowedParamsObject,\r\n\t\t...updateParams,\r\n\t};\r\n\r\n\t// Filter out key-value pairs with null values\r\n\tconst queryArgs = Object.fromEntries(\r\n\t\tObject.entries(mergeArgs).filter(([key, value]) => value !== null)\r\n\t);\r\n\r\n\t// Process queryParams with type 'url' and update newUrl accordingly\r\n\tif (queryArgs) {\r\n\t\tmap(queryArgs, (pVal, param) => {\r\n\t\t\tif (\r\n\t\t\t\tqueryParams &&\r\n\t\t\t\tqueryParams.hasOwnProperty(param) &&\r\n\t\t\t\tqueryParams[param].type === 'url'\r\n\t\t\t) {\r\n\t\t\t\tnewUrl = AtrcAddUrlArg(newUrl, param, pVal);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// setting new query params\r\n\t// exclude type 'url'. It need to add on url not on param.\r\n\r\n\tif (queryArgs && Object.keys(queryArgs).length > 0) {\r\n\t\tallowedParams.forEach(function (param) {\r\n\t\t\tif (param in queryArgs) {\r\n\t\t\t\tif (queryArgs[param] !== '') {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\t!(\r\n\t\t\t\t\t\t\tqueryParams &&\r\n\t\t\t\t\t\t\tqueryParams.hasOwnProperty(param) &&\r\n\t\t\t\t\t\t\tqueryParams[param].type === 'url'\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tparams.set(param, queryArgs[param]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tparams.delete(param);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tparams.delete(param);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tnewUrl = newUrl.replace(newUrl, `${newUrl}`);\r\n\t\tif (params.toString()) {\r\n\t\t\tnewUrl = `${newUrl}?${params.toString()}`;\r\n\t\t}\r\n\r\n\t\t// Replace the current history state with the modified URL\r\n\t\twindow.history.replaceState({}, document.title, decodeURI(newUrl));\r\n\r\n\t\t// Return the updated or added query parameters\r\n\t\treturn queryArgs;\r\n\t}\r\n\r\n\t// Return null if there are no updated or added query parameters\r\n\treturn null;\r\n}\r\n\r\n/**\r\n * Given a value which can be specified as one or the other of a comma-separated\r\n * string or an array, returns a value normalized to an array of strings, or\r\n * null if the value cannot be interpreted as either.\r\n *\r\n * @param {string|string[]|*} value\r\n *\r\n * @return {?(string[])} Normalized field value.\r\n */\r\nfunction getNormalizedCommaSeparable(value) {\r\n\tif (typeof value === 'string') {\r\n\t\treturn value.split(',');\r\n\t} else if (Array.isArray(value)) {\r\n\t\treturn value;\r\n\t}\r\n\r\n\treturn null;\r\n}\r\n\r\n/**\r\n * An object of properties describing a specific query.\r\n *\r\n * @typedef {Object} WPQueriedDataQueryParts\r\n *\r\n * @property {number}      page     The query page (1-based index, default 1).\r\n * @property {number}      perPage  Items per page for query (default 10).\r\n * @property {string}      queryKey An encoded stable string of all non-\r\n *                                  pagination, non-fields query parameters.\r\n * @property {?(string[])} fields   Target subset of fields to derive from\r\n *                                  item objects.\r\n * @property {?(number[])} include  Specific item IDs to include.\r\n */\r\n\r\n/**\r\n * Given a query object, returns an object of parts, including pagination\r\n * details (`page` and `perPage`, or default values). All other properties are\r\n * encoded into a stable (idempotent) `queryKey` value.\r\n * Link https://github.com/WordPress/gutenberg/blob/e12881c79441ca874fb2b2c2adffba8ed0792103/packages/core-data/src/queried-data/get-query-parts.js#L34\r\n * @param {Object} query Optional query object.\r\n *\r\n * @return {WPQueriedDataQueryParts} Query parts.\r\n */\r\nexport function AtrcGetQueryParts(query) {\r\n\t/**\r\n\t * @type {WPQueriedDataQueryParts}\r\n\t */\r\n\tconst parts = {\r\n\t\tqueryKey: 'atrcQueryKey',\r\n\t\tpage: 1,\r\n\t\tperPage: 10,\r\n\t\tfields: null,\r\n\t\tinclude: null,\r\n\t};\r\n\tif (!query) {\r\n\t\treturn parts;\r\n\t}\r\n\tquery = AtrcRemoveObjectEmptyValues(query);\r\n\r\n\t// Ensure stable key by sorting keys. Also more efficient for iterating.\r\n\tconst keys = Object.keys(query).sort();\r\n\r\n\tfor (let i = 0; i < keys.length; i++) {\r\n\t\tconst key = keys[i];\r\n\t\tlet value = query[key];\r\n\r\n\t\tswitch (key) {\r\n\t\t\t// case 'page':\r\n\t\t\t// \tparts[key] = Number(value);\r\n\t\t\t// \tbreak;\r\n\r\n\t\t\t// case 'per_page':\r\n\t\t\t// \tparts.perPage = Number(value);\r\n\t\t\t// \tbreak;\r\n\r\n\t\t\t// case 'include':\r\n\t\t\t// \tparts.include = getNormalizedCommaSeparable(value).map(Number);\r\n\t\t\t// \tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\t// While in theory, we could exclude \"_fields\" from the queryKey\r\n\t\t\t\t// because two request with different fields have the same results\r\n\t\t\t\t// We're not able to ensure that because the server can decide to omit\r\n\t\t\t\t// fields from the response even if we explicitely asked for it.\r\n\t\t\t\t// Example: Asking for titles in posts without title support.\r\n\t\t\t\tif (key === '_fields') {\r\n\t\t\t\t\tparts.fields = getNormalizedCommaSeparable(value);\r\n\t\t\t\t\t// Make sure to normalize value for `queryKey`\r\n\t\t\t\t\tvalue = parts.fields.join();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// While it could be any deterministic string, for simplicity's\r\n\t\t\t\t// sake mimic querystring encoding for stable key.\r\n\t\t\t\t//\r\n\t\t\t\t// TODO: For consistency with PHP implementation, addQueryArgs\r\n\t\t\t\t// should accept a key value pair, which may optimize its\r\n\t\t\t\t// implementation for our use here, vs. iterating an object\r\n\t\t\t\t// with only a single key.\r\n\t\t\t\tparts.queryKey +=\r\n\t\t\t\t\t(parts.queryKey ? '&' : 'atrcQueryKey-') +\r\n\t\t\t\t\taddQueryArgs('', { [key]: value }).slice(1);\r\n\t\t}\r\n\t}\r\n\r\n\treturn parts;\r\n}\r\n\r\n/**\r\n * Removes all key-value pairs from the given object where the key contains the specified substring.\r\n *\r\n * @param {Object} obj       - The object from which to remove key-value pairs.\r\n * @param {string} substring - The substring to match in the keys for removal.\r\n * @return {void} without cloned delete\r\n */\r\nexport function AtrcObjAddFlushedKey(obj, substring) {\r\n\tfor (const key in obj) {\r\n\t\tif (key.includes(substring)) {\r\n\t\t\tobj[key] = 'atrcFlushed';\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Flushes the cache by removing all key-value pairs with keys containing the atrcQueryKey.\r\n *\r\n * @param {Object} cache - The cache object to be flushed.\r\n * @return {void}\r\n */\r\nexport function AtrcFlushCache(cache) {\r\n\tAtrcObjAddFlushedKey(cache, 'atrcQueryKey');\r\n}\r\n\r\n/**\r\n * Flushes the cache by removing all key-value pairs with keys containing the atrcQueryKey.\r\n *\r\n * @param {any} data - The cache object or string.\r\n * @return {void}\r\n */\r\nexport function AtrcIsFlushed(data) {\r\n\treturn 'atrcFlushed' === data;\r\n}\r\n"],"mappings":"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"}