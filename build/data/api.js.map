{"version":3,"names":["_url","require","_axios","_interopRequireDefault","_store","obj","__esModule","default","_typeof","o","Symbol","iterator","constructor","prototype","_regeneratorRuntime","e","t","r","Object","n","hasOwnProperty","defineProperty","value","i","a","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","_catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","_toPropertyKey","_createClass","protoProps","staticProps","_toPrimitive","String","toPrimitive","Number","axiosFetch","options","path","data","startsWith","concat","AtrcApis","baseUrls","replace","axios","url","ClassAtrcApis","types","XWPNonce","xWpNonce","val","baseUrl","register","_props$callbacks","callbacks","_props$filterResult","filterResult","_props$filterData","filterData","_props$addStore","addStore","optionName","queryArgs","allowedParams","getSettings","saveSettings","getItems","getItem","insertItem","updateItem","deleteItem","AtrcStore","registerType","callback","_doApi","_callee","rowId","api","result","response","newData","_args","_callee$","_context","find","item","console","defaults","headers","common","t0","addQueryArgs","get","countAllItems","parseInt","totalPages","countQueryItems","items","settings","t1","log","doApi","_x","_x2","_x3","_default","exports"],"sources":["D:/wamp/www/atrc-package/atrc/packages/data/api.js"],"sourcesContent":["/* WordPress */\r\nimport { addQueryArgs } from '@wordpress/url';\r\n\r\n/* Library */\r\nimport axios from 'axios';\r\n\r\n/* Inbuilt */\r\nimport { AtrcStore } from './store';\r\n\r\n/* Local */\r\n/* AtrcApis is a utility class that can be used to register and perform CRUD operations on different types of APIs. It allows for registering different types of APIs for a particular data type, such as posts, pages, and custom types, and also allows for registering custom types of APIs. The class utilizes the @wordpress/api-fetch and @wordpress/url libraries to handle the API calls and add query arguments to the URLs, and it allows for additional actions to be performed on the data before or after the API call is made. It also allows for adding store using @wordpress/data library.*/\r\n\r\nfunction axiosFetch(options) {\r\n\tlet { key, path, data, method } = options;\r\n\tif (!path.startsWith('http')) {\r\n\t\tif (!path.startsWith('wp-json')) {\r\n\t\t\tpath = `wp-json/${path}`;\r\n\t\t}\r\n\t}\r\n\tif (AtrcApis.baseUrls[key]) {\r\n\t\tpath = AtrcApis.baseUrls[key] + `/${path}`;\r\n\t} else if (AtrcApis.baseUrls['atrc-prefix-atrc-global']) {\r\n\t\tpath = AtrcApis.baseUrls['atrc-prefix-atrc-global'] + `/${path}`;\r\n\t}\r\n\tpath = path.replace(/([^:]\\/)\\/+/g, '$1');\r\n\tpath = path.replace(/wp-json\\/wp-json\\//, 'wp-json/');\r\n\r\n\treturn axios({\r\n\t\turl: path,\r\n\t\tmethod,\r\n\t\tdata,\r\n\t});\r\n}\r\n\r\nclass ClassAtrcApis {\r\n\tconstructor() {\r\n\t\tif (!ClassAtrcApis.instance) {\r\n\t\t\tClassAtrcApis.instance = this;\r\n\t\t\tthis.types = [];\r\n\t\t\tthis.baseUrls = {};\r\n\t\t\tthis.XWPNonce = '';\r\n\t\t}\r\n\t\treturn ClassAtrcApis.instance;\r\n\t}\r\n\r\n\txWpNonce(val) {\r\n\t\tthis.XWPNonce = val;\r\n\t}\r\n\r\n\tbaseUrl(key, url) {\r\n\t\tthis.baseUrls[key] = url;\r\n\t}\r\n\r\n\tregister(props) {\r\n\t\t/**\r\n\t\t * @param {string}        key          key data type eg: post, page, custom type, custom table etc\r\n\t\t * @param {string}        path         rest api respective or full path eg:/wp/v2/posts/ or http://example.com/wp-json/wp/v2/posts/\r\n\t\t * @param {Object}        callbacks    a set of callback function for respective type or types eg: { getItems: () => {}, getItem: () => {}, insertItem: () => {}, deleteItem: () => {}}\r\n\t\t * @param {function(...)} filterResult optional filter result to add additional data on result\r\n\t\t * @param {boolean}       addStore     add store using @wordpress/data\r\n\t\t */\r\n\t\tconst {\r\n\t\t\tkey,\r\n\t\t\tpath,\r\n\t\t\tcallbacks = {},\r\n\t\t\tfilterResult = null,\r\n\t\t\tfilterData = null,\r\n\t\t\taddStore = true,\r\n\t\t\ttype,\r\n\t\t\toptionName,\r\n\t\t\tqueryArgs,\r\n\t\t\tallowedParams,\r\n\t\t} = props;\r\n\t\tif ('settings' === type) {\r\n\t\t\tthis.types.push({\r\n\t\t\t\tkey,\r\n\t\t\t\tpath,\r\n\t\t\t\ttype: 'getSettings',\r\n\t\t\t\tcallbacks: callbacks.getSettings || null,\r\n\t\t\t\tfilterResult,\r\n\t\t\t\tfilterData,\r\n\t\t\t\toptionName,\r\n\t\t\t});\r\n\t\t\tthis.types.push({\r\n\t\t\t\tkey,\r\n\t\t\t\tpath,\r\n\t\t\t\ttype: 'saveSettings',\r\n\t\t\t\tcallbacks: callbacks.saveSettings || null,\r\n\t\t\t\tfilterResult,\r\n\t\t\t\tfilterData,\r\n\t\t\t\toptionName,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\t// Register all methods for the key and path\r\n\t\t\tthis.types.push({\r\n\t\t\t\tkey,\r\n\t\t\t\tpath,\r\n\t\t\t\ttype: 'getItems',\r\n\t\t\t\tcallbacks: callbacks.getItems || null,\r\n\t\t\t\tfilterResult,\r\n\t\t\t\tfilterData,\r\n\t\t\t});\r\n\t\t\tthis.types.push({\r\n\t\t\t\tkey,\r\n\t\t\t\tpath,\r\n\t\t\t\ttype: 'getItem',\r\n\t\t\t\tcallbacks: callbacks.getItem || null,\r\n\t\t\t\tfilterResult,\r\n\t\t\t\tfilterData,\r\n\t\t\t});\r\n\t\t\tthis.types.push({\r\n\t\t\t\tkey,\r\n\t\t\t\tpath,\r\n\t\t\t\ttype: 'insertItem',\r\n\t\t\t\tcallbacks: callbacks.insertItem || null,\r\n\t\t\t\tfilterResult,\r\n\t\t\t\tfilterData,\r\n\t\t\t});\r\n\t\t\tthis.types.push({\r\n\t\t\t\tkey,\r\n\t\t\t\tpath,\r\n\t\t\t\ttype: 'updateItem',\r\n\t\t\t\tcallbacks: callbacks.updateItem || null,\r\n\t\t\t\tfilterResult,\r\n\t\t\t\tfilterData,\r\n\t\t\t});\r\n\t\t\tthis.types.push({\r\n\t\t\t\tkey,\r\n\t\t\t\tpath,\r\n\t\t\t\ttype: 'deleteItem',\r\n\t\t\t\tcallbacks: callbacks.deleteItem || null,\r\n\t\t\t\tfilterResult,\r\n\t\t\t\tfilterData,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (addStore) {\r\n\t\t\tAtrcStore.register({\r\n\t\t\t\tkey,\r\n\t\t\t\ttype,\r\n\t\t\t\tqueryArgs,\r\n\t\t\t\tallowedParams,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {string}        key      key data type eg: post, page, custom type, custom table etc\r\n\t * @param {string}        path     rest api respective or full path eg:/wp/v2/posts/ or http://example.com/wp-json/wp/v2/posts/\r\n\t * @param {string}        type     custom type expect CURD operations\r\n\t * @param {function(...)} callback custom type callback function eg: doSomething: () => {}\r\n\t */\r\n\tregisterType(key, path, type, callback) {\r\n\t\tthis.types.push({ key, path, type, callback });\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {string} key   key data type eg: post, page, custom type, custom table etc\r\n\t * @param {string} type  type of api\r\n\t * @param {Object} data  optional either query args or insert/update data\r\n\t * @param {number} rowId optional either query args or insert/update data\r\n\t */\r\n\tasync doApi(key, type, data, rowId = 0) {\r\n\t\t// Find the API endpoint based on the key and type provided\r\n\t\tconst api = this.types.find(\r\n\t\t\t(item) => item.key === key && item.type === type\r\n\t\t);\r\n\t\tif (!api) {\r\n\t\t\tconsole.error(`API for key ${key} and type ${type} not found.`);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Perform the API call based on the type\r\n\t\tlet result = {};\r\n\t\tlet response = {};\r\n\t\ttry {\r\n\t\t\tif (this.XWPNonce) {\r\n\t\t\t\taxios.defaults.headers.common['X-WP-Nonce'] = this.XWPNonce;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (api.type) {\r\n\t\t\t\tcase 'getItems': {\r\n\t\t\t\t\tlet { path } = api;\r\n\r\n\t\t\t\t\tif (data) {\r\n\t\t\t\t\t\tpath = addQueryArgs(path, data);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tresponse = await axiosFetch({\r\n\t\t\t\t\t\tkey,\r\n\t\t\t\t\t\tpath,\r\n\t\t\t\t\t\tmethod: 'GET',\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tif (response.headers) {\r\n\t\t\t\t\t\tif (response.headers.get('X-WP-All-Total')) {\r\n\t\t\t\t\t\t\tresult.countAllItems = parseInt(\r\n\t\t\t\t\t\t\t\tresponse.headers.get('X-WP-All-Total')\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (response.headers.get('X-WP-TotalPages')) {\r\n\t\t\t\t\t\t\tresult.totalPages = parseInt(\r\n\t\t\t\t\t\t\t\tresponse.headers.get('X-WP-TotalPages')\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (response.headers.get('X-WP-Total')) {\r\n\t\t\t\t\t\t\tresult.countQueryItems = parseInt(\r\n\t\t\t\t\t\t\t\tresponse.headers.get('X-WP-Total')\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tresult.items = response.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 'getItem': {\r\n\t\t\t\t\tresponse = await axiosFetch({\r\n\t\t\t\t\t\tkey,\r\n\t\t\t\t\t\tpath: `${api.path}/${rowId}`,\r\n\t\t\t\t\t\tmethod: 'GET',\r\n\t\t\t\t\t});\r\n\t\t\t\t\tresult = response.data;\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 'insertItem':\r\n\t\t\t\t\tif (api.filterData) {\r\n\t\t\t\t\t\tdata = api.filterData(data, api);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresponse = await axiosFetch({\r\n\t\t\t\t\t\tkey,\r\n\t\t\t\t\t\tpath: api.path,\r\n\t\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\t\tdata,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tresult = response.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'updateItem':\r\n\t\t\t\t\tif (api.filterData) {\r\n\t\t\t\t\t\tdata = api.filterData(data, api);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tresponse = await axiosFetch({\r\n\t\t\t\t\t\tkey,\r\n\t\t\t\t\t\tpath: `${api.path}/${rowId}`,\r\n\t\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\t\tdata,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tresult = response.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'deleteItem':\r\n\t\t\t\t\tresponse = await axiosFetch({\r\n\t\t\t\t\t\tkey,\r\n\t\t\t\t\t\tpath: `${api.path}/${rowId}`,\r\n\t\t\t\t\t\tmethod: 'DELETE',\r\n\t\t\t\t\t});\r\n\t\t\t\t\tresult = response.data;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t/* Settings */\r\n\t\t\t\tcase 'getSettings': {\r\n\t\t\t\t\tresponse = await axiosFetch({\r\n\t\t\t\t\t\tkey,\r\n\t\t\t\t\t\tpath: api.path,\r\n\t\t\t\t\t\tmethod: 'GET',\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (api.optionName) {\r\n\t\t\t\t\t\tif (response.data[api.optionName]) {\r\n\t\t\t\t\t\t\tresult.settings = response.data[api.optionName];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tresult.settings = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tresult.settings = response.data;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcase 'saveSettings': {\r\n\t\t\t\t\tlet newData;\r\n\t\t\t\t\tif (api.optionName) {\r\n\t\t\t\t\t\tnewData = {};\r\n\t\t\t\t\t\tnewData[api.optionName] = data;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnewData = data;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tresponse = await axiosFetch({\r\n\t\t\t\t\t\tkey,\r\n\t\t\t\t\t\tpath: api.path,\r\n\t\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\t\tdata: newData,\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tif (api.optionName) {\r\n\t\t\t\t\t\tif (response.data[api.optionName]) {\r\n\t\t\t\t\t\t\tresult.settings = response.data[api.optionName];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tresult.settings = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tresult.settings = response.data;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif (api.callbacks) {\r\n\t\t\t\t\t\tresult = api.callbacks(key, type, data, rowId);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.error(`Invalid type ${api.type} provided.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (api.filterResult) {\r\n\t\t\t\tresult = api.filterResult(result, response);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\t// eslint-disable-next-line no-console\r\n\t\t\tconsole.log(\r\n\t\t\t\t`Error while performing AtrcApis call. API details :${api}  Error: ${error}`\r\n\t\t\t);\r\n\t\t\tresult.error = error;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n}\r\nconst AtrcApis = new ClassAtrcApis();\r\n\r\nexport default AtrcApis;\r\n"],"mappings":"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"}