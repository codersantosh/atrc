{"version":3,"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","_catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","_toPropertyKey","_createClass","protoProps","staticProps","_toPrimitive","String","toPrimitive","Number","addQueryArgs","axios","AtrcStore","axiosFetch","options","path","data","startsWith","concat","AtrcApis","baseUrls","replace","url","ClassAtrcApis","types","XWPNonce","xWpNonce","val","baseUrl","register","_props$callbacks","callbacks","_props$filterResult","filterResult","_props$filterData","filterData","_props$addStore","addStore","optionName","queryArgs","allowedParams","getSettings","saveSettings","getItems","getItem","insertItem","updateItem","deleteItem","registerType","callback","_doApi","_callee","rowId","api","result","response","newData","_args","_callee$","_context","find","item","console","defaults","headers","common","t0","get","countAllItems","parseInt","totalPages","countQueryItems","items","settings","t1","log","doApi","_x","_x2","_x3"],"sources":["D:/wamp/www/atrc-package/atrc/packages/data/api.js"],"sourcesContent":["/* WordPress */\r\nimport { addQueryArgs } from '@wordpress/url';\r\n\r\n/* Library */\r\nimport axios from 'axios';\r\n\r\n/* Inbuilt */\r\nimport { AtrcStore } from './store';\r\n\r\n/* Local */\r\n/* AtrcApis is a utility class that can be used to register and perform CRUD operations on different types of APIs. It allows for registering different types of APIs for a particular data type, such as posts, pages, and custom types, and also allows for registering custom types of APIs. The class utilizes the @wordpress/api-fetch and @wordpress/url libraries to handle the API calls and add query arguments to the URLs, and it allows for additional actions to be performed on the data before or after the API call is made. It also allows for adding store using @wordpress/data library.*/\r\n\r\nfunction axiosFetch(options) {\r\n\tlet { key, path, data, method } = options;\r\n\tif (!path.startsWith('http')) {\r\n\t\tif (!path.startsWith('wp-json')) {\r\n\t\t\tpath = `wp-json/${path}`;\r\n\t\t}\r\n\t}\r\n\tif (AtrcApis.baseUrls[key]) {\r\n\t\tpath = AtrcApis.baseUrls[key] + `/${path}`;\r\n\t} else if (AtrcApis.baseUrls['atrc-prefix-atrc-global']) {\r\n\t\tpath = AtrcApis.baseUrls['atrc-prefix-atrc-global'] + `/${path}`;\r\n\t}\r\n\tpath = path.replace(/([^:]\\/)\\/+/g, '$1');\r\n\tpath = path.replace(/wp-json\\/wp-json\\//, 'wp-json/');\r\n\r\n\treturn axios({\r\n\t\turl: path,\r\n\t\tmethod,\r\n\t\tdata,\r\n\t});\r\n}\r\n\r\nclass ClassAtrcApis {\r\n\tconstructor() {\r\n\t\tif (!ClassAtrcApis.instance) {\r\n\t\t\tClassAtrcApis.instance = this;\r\n\t\t\tthis.types = [];\r\n\t\t\tthis.baseUrls = {};\r\n\t\t\tthis.XWPNonce = '';\r\n\t\t}\r\n\t\treturn ClassAtrcApis.instance;\r\n\t}\r\n\r\n\txWpNonce(val) {\r\n\t\tthis.XWPNonce = val;\r\n\t}\r\n\r\n\tbaseUrl(key, url) {\r\n\t\tthis.baseUrls[key] = url;\r\n\t}\r\n\r\n\tregister(props) {\r\n\t\t/**\r\n\t\t * @param {string}        key          key data type eg: post, page, custom type, custom table etc\r\n\t\t * @param {string}        path         rest api respective or full path eg:/wp/v2/posts/ or http://example.com/wp-json/wp/v2/posts/\r\n\t\t * @param {Object}        callbacks    a set of callback function for respective type or types eg: { getItems: () => {}, getItem: () => {}, insertItem: () => {}, deleteItem: () => {}}\r\n\t\t * @param {function(...)} filterResult optional filter result to add additional data on result\r\n\t\t * @param {boolean}       addStore     add store using @wordpress/data\r\n\t\t */\r\n\t\tconst {\r\n\t\t\tkey,\r\n\t\t\tpath,\r\n\t\t\tcallbacks = {},\r\n\t\t\tfilterResult = null,\r\n\t\t\tfilterData = null,\r\n\t\t\taddStore = true,\r\n\t\t\ttype,\r\n\t\t\toptionName,\r\n\t\t\tqueryArgs,\r\n\t\t\tallowedParams,\r\n\t\t} = props;\r\n\t\tif ('settings' === type) {\r\n\t\t\tthis.types.push({\r\n\t\t\t\tkey,\r\n\t\t\t\tpath,\r\n\t\t\t\ttype: 'getSettings',\r\n\t\t\t\tcallbacks: callbacks.getSettings || null,\r\n\t\t\t\tfilterResult,\r\n\t\t\t\tfilterData,\r\n\t\t\t\toptionName,\r\n\t\t\t});\r\n\t\t\tthis.types.push({\r\n\t\t\t\tkey,\r\n\t\t\t\tpath,\r\n\t\t\t\ttype: 'saveSettings',\r\n\t\t\t\tcallbacks: callbacks.saveSettings || null,\r\n\t\t\t\tfilterResult,\r\n\t\t\t\tfilterData,\r\n\t\t\t\toptionName,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\t// Register all methods for the key and path\r\n\t\t\tthis.types.push({\r\n\t\t\t\tkey,\r\n\t\t\t\tpath,\r\n\t\t\t\ttype: 'getItems',\r\n\t\t\t\tcallbacks: callbacks.getItems || null,\r\n\t\t\t\tfilterResult,\r\n\t\t\t\tfilterData,\r\n\t\t\t});\r\n\t\t\tthis.types.push({\r\n\t\t\t\tkey,\r\n\t\t\t\tpath,\r\n\t\t\t\ttype: 'getItem',\r\n\t\t\t\tcallbacks: callbacks.getItem || null,\r\n\t\t\t\tfilterResult,\r\n\t\t\t\tfilterData,\r\n\t\t\t});\r\n\t\t\tthis.types.push({\r\n\t\t\t\tkey,\r\n\t\t\t\tpath,\r\n\t\t\t\ttype: 'insertItem',\r\n\t\t\t\tcallbacks: callbacks.insertItem || null,\r\n\t\t\t\tfilterResult,\r\n\t\t\t\tfilterData,\r\n\t\t\t});\r\n\t\t\tthis.types.push({\r\n\t\t\t\tkey,\r\n\t\t\t\tpath,\r\n\t\t\t\ttype: 'updateItem',\r\n\t\t\t\tcallbacks: callbacks.updateItem || null,\r\n\t\t\t\tfilterResult,\r\n\t\t\t\tfilterData,\r\n\t\t\t});\r\n\t\t\tthis.types.push({\r\n\t\t\t\tkey,\r\n\t\t\t\tpath,\r\n\t\t\t\ttype: 'deleteItem',\r\n\t\t\t\tcallbacks: callbacks.deleteItem || null,\r\n\t\t\t\tfilterResult,\r\n\t\t\t\tfilterData,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (addStore) {\r\n\t\t\tAtrcStore.register({\r\n\t\t\t\tkey,\r\n\t\t\t\ttype,\r\n\t\t\t\tqueryArgs,\r\n\t\t\t\tallowedParams,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {string}        key      key data type eg: post, page, custom type, custom table etc\r\n\t * @param {string}        path     rest api respective or full path eg:/wp/v2/posts/ or http://example.com/wp-json/wp/v2/posts/\r\n\t * @param {string}        type     custom type expect CURD operations\r\n\t * @param {function(...)} callback custom type callback function eg: doSomething: () => {}\r\n\t */\r\n\tregisterType(key, path, type, callback) {\r\n\t\tthis.types.push({ key, path, type, callback });\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {string} key   key data type eg: post, page, custom type, custom table etc\r\n\t * @param {string} type  type of api\r\n\t * @param {Object} data  optional either query args or insert/update data\r\n\t * @param {number} rowId optional either query args or insert/update data\r\n\t */\r\n\tasync doApi(key, type, data, rowId = 0) {\r\n\t\t// Find the API endpoint based on the key and type provided\r\n\t\tconst api = this.types.find(\r\n\t\t\t(item) => item.key === key && item.type === type\r\n\t\t);\r\n\t\tif (!api) {\r\n\t\t\tconsole.error(`API for key ${key} and type ${type} not found.`);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Perform the API call based on the type\r\n\t\tlet result = {};\r\n\t\tlet response = {};\r\n\t\ttry {\r\n\t\t\tif (this.XWPNonce) {\r\n\t\t\t\taxios.defaults.headers.common['X-WP-Nonce'] = this.XWPNonce;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (api.type) {\r\n\t\t\t\tcase 'getItems': {\r\n\t\t\t\t\tlet { path } = api;\r\n\r\n\t\t\t\t\tif (data) {\r\n\t\t\t\t\t\tpath = addQueryArgs(path, data);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tresponse = await axiosFetch({\r\n\t\t\t\t\t\tkey,\r\n\t\t\t\t\t\tpath,\r\n\t\t\t\t\t\tmethod: 'GET',\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tif (response.headers) {\r\n\t\t\t\t\t\tif (response.headers.get('X-WP-All-Total')) {\r\n\t\t\t\t\t\t\tresult.countAllItems = parseInt(\r\n\t\t\t\t\t\t\t\tresponse.headers.get('X-WP-All-Total')\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (response.headers.get('X-WP-TotalPages')) {\r\n\t\t\t\t\t\t\tresult.totalPages = parseInt(\r\n\t\t\t\t\t\t\t\tresponse.headers.get('X-WP-TotalPages')\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (response.headers.get('X-WP-Total')) {\r\n\t\t\t\t\t\t\tresult.countQueryItems = parseInt(\r\n\t\t\t\t\t\t\t\tresponse.headers.get('X-WP-Total')\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tresult.items = response.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 'getItem': {\r\n\t\t\t\t\tresponse = await axiosFetch({\r\n\t\t\t\t\t\tkey,\r\n\t\t\t\t\t\tpath: `${api.path}/${rowId}`,\r\n\t\t\t\t\t\tmethod: 'GET',\r\n\t\t\t\t\t});\r\n\t\t\t\t\tresult = response.data;\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 'insertItem':\r\n\t\t\t\t\tif (api.filterData) {\r\n\t\t\t\t\t\tdata = api.filterData(data, api);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresponse = await axiosFetch({\r\n\t\t\t\t\t\tkey,\r\n\t\t\t\t\t\tpath: api.path,\r\n\t\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\t\tdata,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tresult = response.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'updateItem':\r\n\t\t\t\t\tif (api.filterData) {\r\n\t\t\t\t\t\tdata = api.filterData(data, api);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tresponse = await axiosFetch({\r\n\t\t\t\t\t\tkey,\r\n\t\t\t\t\t\tpath: `${api.path}/${rowId}`,\r\n\t\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\t\tdata,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tresult = response.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'deleteItem':\r\n\t\t\t\t\tresponse = await axiosFetch({\r\n\t\t\t\t\t\tkey,\r\n\t\t\t\t\t\tpath: `${api.path}/${rowId}`,\r\n\t\t\t\t\t\tmethod: 'DELETE',\r\n\t\t\t\t\t});\r\n\t\t\t\t\tresult = response.data;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t/* Settings */\r\n\t\t\t\tcase 'getSettings': {\r\n\t\t\t\t\tresponse = await axiosFetch({\r\n\t\t\t\t\t\tkey,\r\n\t\t\t\t\t\tpath: api.path,\r\n\t\t\t\t\t\tmethod: 'GET',\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif (api.optionName) {\r\n\t\t\t\t\t\tif (response.data[api.optionName]) {\r\n\t\t\t\t\t\t\tresult.settings = response.data[api.optionName];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tresult.settings = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tresult.settings = response.data;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcase 'saveSettings': {\r\n\t\t\t\t\tlet newData;\r\n\t\t\t\t\tif (api.optionName) {\r\n\t\t\t\t\t\tnewData = {};\r\n\t\t\t\t\t\tnewData[api.optionName] = data;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnewData = data;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tresponse = await axiosFetch({\r\n\t\t\t\t\t\tkey,\r\n\t\t\t\t\t\tpath: api.path,\r\n\t\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\t\tdata: newData,\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tif (api.optionName) {\r\n\t\t\t\t\t\tif (response.data[api.optionName]) {\r\n\t\t\t\t\t\t\tresult.settings = response.data[api.optionName];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tresult.settings = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tresult.settings = response.data;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif (api.callbacks) {\r\n\t\t\t\t\t\tresult = api.callbacks(key, type, data, rowId);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.error(`Invalid type ${api.type} provided.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (api.filterResult) {\r\n\t\t\t\tresult = api.filterResult(result, response);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\t// eslint-disable-next-line no-console\r\n\t\t\tconsole.log(\r\n\t\t\t\t`Error while performing AtrcApis call. API details :${api}  Error: ${error}`\r\n\t\t\t);\r\n\t\t\tresult.error = error;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n}\r\nconst AtrcApis = new ClassAtrcApis();\r\n\r\nexport default AtrcApis;\r\n"],"mappings":"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"}