{"version":3,"names":["_i18n","require","_coreData","_element","_blocks","_wordcount","_wrap","_interopRequireDefault","_excluded","obj","__esModule","default","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","toString","slice","constructor","name","Array","from","test","len","arr2","r","l","t","Symbol","iterator","e","u","a","f","next","done","push","value","return","isArray","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","indexOf","propertyIsEnumerable","sourceKeys","keys","AVERAGE_READING_RATE","AtrcPostTimeToRead","props","ref","postType","postId","htmlTag","defaultProps","_useEntityProp","useEntityProp","_useEntityProp2","contentStructure","_useEntityBlockEditor","useEntityBlockEditor","id","_useEntityBlockEditor2","blocks","minutesToReadString","useMemo","content","Function","unstableSerializeAndClean","wordCountType","_x","minutesToRead","Math","max","round","wordCount","sprintf","_n","React","createElement","tag","_default","exports","forwardRef"],"sources":["D:/wamp/www/atrc-package/atrc/packages/query/post-time-to-read/index.js"],"sourcesContent":["/*WordPress*/\r\nimport { _n, _x, sprintf } from '@wordpress/i18n';\r\n\r\nimport { useEntityBlockEditor, useEntityProp } from '@wordpress/core-data';\r\n\r\nimport { forwardRef, useMemo } from '@wordpress/element';\r\n\r\nimport {\r\n\t// eslint-disable-next-line @wordpress/no-unsafe-wp-apis\r\n\t__unstableSerializeAndClean as unstableSerializeAndClean,\r\n} from '@wordpress/blocks';\r\n\r\nimport { count as wordCount } from '@wordpress/wordcount';\r\n\r\n/* Inbuilt */\r\nimport AtrcWrap from '../../atoms/wrap';\r\n\r\n/* Local */\r\nconst AVERAGE_READING_RATE = 189;\r\n\r\nconst AtrcPostTimeToRead = (props, ref) => {\r\n\tconst { postType, postId, htmlTag, ...defaultProps } = props;\r\n\r\n\tconst [contentStructure] = useEntityProp(\r\n\t\t'postType',\r\n\t\tpostType,\r\n\t\t'content',\r\n\t\tpostId\r\n\t);\r\n\r\n\tconst [blocks] = useEntityBlockEditor('postType', postType, {\r\n\t\tid: postId,\r\n\t});\r\n\r\n\tconst minutesToReadString = useMemo(() => {\r\n\t\t// Replicates the logic found in getEditedPostContent().\r\n\t\tlet content;\r\n\t\tif (contentStructure instanceof Function) {\r\n\t\t\tcontent = contentStructure({ blocks });\r\n\t\t} else if (blocks) {\r\n\t\t\t// If we have parsed blocks already, they should be our source of truth.\r\n\t\t\t// Parsing applies block deprecations and legacy block conversions that\r\n\t\t\t// unparsed content will not have.\r\n\t\t\tcontent = unstableSerializeAndClean(blocks);\r\n\t\t} else {\r\n\t\t\tcontent = contentStructure;\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t * translators: If your word count is based on single characters (e.g. East Asian characters),\r\n\t\t * enter 'characters_excluding_spaces' or 'characters_including_spaces'. Otherwise, enter 'words'.\r\n\t\t * Do not translate into your own language.\r\n\t\t */\r\n\t\tconst wordCountType = _x('words', 'Word count type. Do not translate!');\r\n\r\n\t\tconst minutesToRead = Math.max(\r\n\t\t\t1,\r\n\t\t\tMath.round(wordCount(content, wordCountType) / AVERAGE_READING_RATE)\r\n\t\t);\r\n\r\n\t\treturn sprintf(\r\n\t\t\t/* translators: %d is the number of minutes the post will take to read. */\r\n\t\t\t_n('%d minute', '%d minutes', minutesToRead),\r\n\t\t\tminutesToRead\r\n\t\t);\r\n\t}, [contentStructure, blocks]);\r\n\r\n\treturn (\r\n\t\t<AtrcWrap\r\n\t\t\t{...defaultProps}\r\n\t\t\tref={ref}\r\n\t\t\ttag={htmlTag}>\r\n\t\t\t{minutesToReadString}\r\n\t\t</AtrcWrap>\r\n\t);\r\n};\r\nexport default forwardRef(AtrcPostTimeToRead);\r\n"],"mappings":"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"}