{"version":3,"names":["forwardRef","__","useEntityProp","AtrcWrap","AtrcNotice","AtrcIsScalar","AtrcPostMeta","props","ref","postType","postId","htmlTag","metaKey","_props$className","className","defaultProps","_objectWithoutProperties","_excluded","_useEntityProp","_useEntityProp2","_slicedToArray","meta","updateMeta","metaValue","React","createElement","_extends","isDismissible","autoDismiss","classnames","concat","tag"],"sources":["D:/wamp/www/atrc-package/atrc/packages/query/post-meta/index.js"],"sourcesContent":["/*React*/\r\nimport { forwardRef } from 'react';\r\n\r\n/*WordPress*/\r\nimport { __ } from '@wordpress/i18n';\r\n\r\nimport { useEntityProp } from '@wordpress/core-data';\r\n\r\n/* Atoms */\r\nimport AtrcWrap from '../../atoms/wrap';\r\n\r\n/* Molecules */\r\nimport AtrcNotice from './../../molecules/notice';\r\n\r\n/* Utils */\r\nimport AtrcIsScalar from '../../utils/is-scalar';\r\n\r\n/* Local */\r\nconst AtrcPostMeta = (props, ref) => {\r\n\tconst {\r\n\t\tpostType,\r\n\t\tpostId,\r\n\t\thtmlTag,\r\n\t\tmetaKey,\r\n\t\tclassName = '',\r\n\t\t...defaultProps\r\n\t} = props;\r\n\r\n\t// eslint-disable-next-line @wordpress/no-unused-vars-before-return, no-unused-vars\r\n\tconst [meta, updateMeta] = useEntityProp(\r\n\t\t'postType',\r\n\t\tpostType,\r\n\t\t'meta',\r\n\t\tpostId\r\n\t);\r\n\tconst metaValue = meta?.[metaKey] || null;\r\n\r\n\tif (null === metaValue) {\r\n\t\treturn (\r\n\t\t\t<AtrcWrap\r\n\t\t\t\t{...defaultProps}\r\n\t\t\t\tref={ref}>\r\n\t\t\t\t<AtrcNotice\r\n\t\t\t\t\tisDismissible={false}\r\n\t\t\t\t\tautoDismiss={false}>\r\n\t\t\t\t\t{__(\r\n\t\t\t\t\t\t'Meta value not found for the provided meta key and it should be accessible through the REST API.',\r\n\t\t\t\t\t\t'atrc-prefix-atrc'\r\n\t\t\t\t\t)}\r\n\t\t\t\t</AtrcNotice>\r\n\t\t\t</AtrcWrap>\r\n\t\t);\r\n\t}\r\n\tif (!AtrcIsScalar(metaValue)) {\r\n\t\treturn (\r\n\t\t\t<AtrcWrap\r\n\t\t\t\t{...defaultProps}\r\n\t\t\t\tref={ref}>\r\n\t\t\t\t<AtrcNotice\r\n\t\t\t\t\tisDismissible={false}\r\n\t\t\t\t\tautoDismiss={false}>\r\n\t\t\t\t\t{__(\r\n\t\t\t\t\t\t'Supported values are limited to strings, numbers, or scalar values only.',\r\n\t\t\t\t\t\t'atrc-prefix-atrc'\r\n\t\t\t\t\t)}\r\n\t\t\t\t</AtrcNotice>\r\n\t\t\t</AtrcWrap>\r\n\t\t);\r\n\t}\r\n\treturn (\r\n\t\t<AtrcWrap\r\n\t\t\t{...defaultProps}\r\n\t\t\tclassName={classnames(`at-meta-${metaKey}`, className)}\r\n\t\t\tref={ref}\r\n\t\t\ttag={htmlTag}>\r\n\t\t\t{metaValue}\r\n\t\t</AtrcWrap>\r\n\t);\r\n};\r\nexport default forwardRef(AtrcPostMeta);\r\n"],"mappings":";;;;;;;;;;AAAA;AACA,SAASA,UAAU,QAAQ,OAAO;;AAElC;AACA,SAASC,EAAE,QAAQ,iBAAiB;AAEpC,SAASC,aAAa,QAAQ,sBAAsB;;AAEpD;AACA,OAAOC,QAAQ,MAAM,kBAAkB;;AAEvC;AACA,OAAOC,UAAU,MAAM,0BAA0B;;AAEjD;AACA,OAAOC,YAAY,MAAM,uBAAuB;;AAEhD;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIC,KAAK,EAAEC,GAAG,EAAK;EACpC,IACCC,QAAQ,GAMLF,KAAK,CANRE,QAAQ;IACRC,MAAM,GAKHH,KAAK,CALRG,MAAM;IACNC,OAAO,GAIJJ,KAAK,CAJRI,OAAO;IACPC,OAAO,GAGJL,KAAK,CAHRK,OAAO;IAAAC,gBAAA,GAGJN,KAAK,CAFRO,SAAS;IAATA,SAAS,GAAAD,gBAAA,cAAG,EAAE,GAAAA,gBAAA;IACXE,YAAY,GAAAC,wBAAA,CACZT,KAAK,EAAAU,SAAA;;EAET;EACA,IAAAC,cAAA,GAA2BhB,aAAa,CACvC,UAAU,EACVO,QAAQ,EACR,MAAM,EACNC,MACD,CAAC;IAAAS,eAAA,GAAAC,cAAA,CAAAF,cAAA;IALMG,IAAI,GAAAF,eAAA;IAAEG,UAAU,GAAAH,eAAA;EAMvB,IAAMI,SAAS,GAAG,CAAAF,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAGT,OAAO,CAAC,KAAI,IAAI;EAEzC,IAAI,IAAI,KAAKW,SAAS,EAAE;IACvB,oBACCC,KAAA,CAAAC,aAAA,CAACtB,QAAQ,EAAAuB,QAAA,KACJX,YAAY;MAChBP,GAAG,EAAEA;IAAI,iBACTgB,KAAA,CAAAC,aAAA,CAACrB,UAAU;MACVuB,aAAa,EAAE,KAAM;MACrBC,WAAW,EAAE;IAAM,GAClB3B,EAAE,CACF,kGAAkG,EAClG,kBACD,CACW,CACH,CAAC;EAEb;EACA,IAAI,CAACI,YAAY,CAACkB,SAAS,CAAC,EAAE;IAC7B,oBACCC,KAAA,CAAAC,aAAA,CAACtB,QAAQ,EAAAuB,QAAA,KACJX,YAAY;MAChBP,GAAG,EAAEA;IAAI,iBACTgB,KAAA,CAAAC,aAAA,CAACrB,UAAU;MACVuB,aAAa,EAAE,KAAM;MACrBC,WAAW,EAAE;IAAM,GAClB3B,EAAE,CACF,0EAA0E,EAC1E,kBACD,CACW,CACH,CAAC;EAEb;EACA,oBACCuB,KAAA,CAAAC,aAAA,CAACtB,QAAQ,EAAAuB,QAAA,KACJX,YAAY;IAChBD,SAAS,EAAEe,UAAU,YAAAC,MAAA,CAAYlB,OAAO,GAAIE,SAAS,CAAE;IACvDN,GAAG,EAAEA,GAAI;IACTuB,GAAG,EAAEpB;EAAQ,IACZY,SACQ,CAAC;AAEb,CAAC;AACD,4BAAevB,UAAU,CAACM,YAAY,CAAC"}