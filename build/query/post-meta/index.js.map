{"version":3,"names":["__","useEntityProp","forwardRef","AtrcWrap","AtrcNotice","AtrcIsScalar","AtrcPostMeta","props","ref","postType","postId","htmlTag","metaKey","defaultProps","meta","updateMeta","metaValue","React","createElement","_extends","isDismissible","autoDismiss","tag"],"sources":["D:/wamp/www/atrc-package/atrc/packages/query/post-meta/index.js"],"sourcesContent":["/*WordPress*/\r\nimport { __ } from '@wordpress/i18n';\r\n\r\nimport { useEntityProp } from '@wordpress/core-data';\r\n\r\nimport { forwardRef } from '@wordpress/element';\r\n\r\n/* Inbuilt */\r\nimport AtrcWrap from '../../atoms/wrap';\r\n\r\nimport AtrcNotice from './../../molecules/notice';\r\n\r\nimport AtrcIsScalar from '../../utils/is-scalar';\r\n\r\n/* Local */\r\nconst AtrcPostMeta = (props, ref) => {\r\n\tconst { postType, postId, htmlTag, metaKey, ...defaultProps } = props;\r\n\r\n\t// eslint-disable-next-line @wordpress/no-unused-vars-before-return, no-unused-vars\r\n\tconst [meta, updateMeta] = useEntityProp(\r\n\t\t'postType',\r\n\t\tpostType,\r\n\t\t'meta',\r\n\t\tpostId\r\n\t);\r\n\tconst metaValue = meta?.[metaKey] || null;\r\n\tif (null === metaValue) {\r\n\t\treturn (\r\n\t\t\t<AtrcWrap\r\n\t\t\t\t{...defaultProps}\r\n\t\t\t\tref={ref}>\r\n\t\t\t\t<AtrcNotice\r\n\t\t\t\t\tisDismissible={false}\r\n\t\t\t\t\tautoDismiss={false}>\r\n\t\t\t\t\t{__(\r\n\t\t\t\t\t\t'Meta value not found for the provided meta key and it should be accessible through the REST API.',\r\n\t\t\t\t\t\t'atrc-prefix-atrc'\r\n\t\t\t\t\t)}\r\n\t\t\t\t</AtrcNotice>\r\n\t\t\t</AtrcWrap>\r\n\t\t);\r\n\t}\r\n\tif (!AtrcIsScalar(metaValue)) {\r\n\t\treturn (\r\n\t\t\t<AtrcWrap\r\n\t\t\t\t{...defaultProps}\r\n\t\t\t\tref={ref}>\r\n\t\t\t\t<AtrcNotice\r\n\t\t\t\t\tisDismissible={false}\r\n\t\t\t\t\tautoDismiss={false}>\r\n\t\t\t\t\t{__(\r\n\t\t\t\t\t\t'Supported values are limited to strings, numbers, or scalar values only.',\r\n\t\t\t\t\t\t'atrc-prefix-atrc'\r\n\t\t\t\t\t)}\r\n\t\t\t\t</AtrcNotice>\r\n\t\t\t</AtrcWrap>\r\n\t\t);\r\n\t}\r\n\treturn (\r\n\t\t<AtrcWrap\r\n\t\t\t{...defaultProps}\r\n\t\t\tref={ref}\r\n\t\t\ttag={htmlTag}>\r\n\t\t\t{metaValue}\r\n\t\t</AtrcWrap>\r\n\t);\r\n};\r\nexport default forwardRef(AtrcPostMeta);\r\n"],"mappings":";AAAA;AACA,SAASA,EAAE,QAAQ,iBAAiB;AAEpC,SAASC,aAAa,QAAQ,sBAAsB;AAEpD,SAASC,UAAU,QAAQ,oBAAoB;;AAE/C;AACA,OAAOC,QAAQ,MAAM,kBAAkB;AAEvC,OAAOC,UAAU,MAAM,0BAA0B;AAEjD,OAAOC,YAAY,MAAM,uBAAuB;;AAEhD;AACA,MAAMC,YAAY,GAAGA,CAACC,KAAK,EAAEC,GAAG,KAAK;EACpC,MAAM;IAAEC,QAAQ;IAAEC,MAAM;IAAEC,OAAO;IAAEC,OAAO;IAAE,GAAGC;EAAa,CAAC,GAAGN,KAAK;;EAErE;EACA,MAAM,CAACO,IAAI,EAAEC,UAAU,CAAC,GAAGd,aAAa,CACvC,UAAU,EACVQ,QAAQ,EACR,MAAM,EACNC,MACD,CAAC;EACD,MAAMM,SAAS,GAAGF,IAAI,GAAGF,OAAO,CAAC,IAAI,IAAI;EACzC,IAAI,IAAI,KAAKI,SAAS,EAAE;IACvB,oBACCC,KAAA,CAAAC,aAAA,CAACf,QAAQ,EAAAgB,QAAA,KACJN,YAAY;MAChBL,GAAG,EAAEA;IAAI,iBACTS,KAAA,CAAAC,aAAA,CAACd,UAAU;MACVgB,aAAa,EAAE,KAAM;MACrBC,WAAW,EAAE;IAAM,GAClBrB,EAAE,CACF,kGAAkG,EAClG,kBACD,CACW,CACH,CAAC;EAEb;EACA,IAAI,CAACK,YAAY,CAACW,SAAS,CAAC,EAAE;IAC7B,oBACCC,KAAA,CAAAC,aAAA,CAACf,QAAQ,EAAAgB,QAAA,KACJN,YAAY;MAChBL,GAAG,EAAEA;IAAI,iBACTS,KAAA,CAAAC,aAAA,CAACd,UAAU;MACVgB,aAAa,EAAE,KAAM;MACrBC,WAAW,EAAE;IAAM,GAClBrB,EAAE,CACF,0EAA0E,EAC1E,kBACD,CACW,CACH,CAAC;EAEb;EACA,oBACCiB,KAAA,CAAAC,aAAA,CAACf,QAAQ,EAAAgB,QAAA,KACJN,YAAY;IAChBL,GAAG,EAAEA,GAAI;IACTc,GAAG,EAAEX;EAAQ,IACZK,SACQ,CAAC;AAEb,CAAC;AACD,eAAed,UAAU,CAACI,YAAY,CAAC"}