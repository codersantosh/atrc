{"version":3,"names":["_i18n","require","_coreData","_element","_wrap","_interopRequireDefault","_excluded","obj","__esModule","default","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","toString","slice","constructor","name","Array","from","test","len","arr2","r","l","t","Symbol","iterator","e","u","a","f","next","done","push","value","return","isArray","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","indexOf","propertyIsEnumerable","sourceKeys","keys","AtrcPostExcerpt","props","ref","postType","postId","htmlTag","_props$excerptLength","excerptLength","_props$wordCountType","wordCountType","defaultProps","_useEntityProp","useEntityProp","_useEntityProp2","rawExcerpt","setExcerpt","rawOrRenderedExcerpt","trim","trimmedExcerpt","split","join","excerptWithSpaces","numberOfSpaces","replaceAll","isTrimmed","excerptContent","__","React","createElement","tag","_default","exports","forwardRef"],"sources":["D:/wamp/www/atrc-package/atrc/packages/query/post-excerpt/index.js"],"sourcesContent":["/*WordPress*/\r\nimport { __ } from '@wordpress/i18n';\r\n\r\nimport { useEntityProp } from '@wordpress/core-data';\r\n\r\nimport { forwardRef } from '@wordpress/element';\r\n\r\n/* Inbuilt */\r\nimport AtrcWrap from '../../atoms/wrap';\r\n\r\n/* Local */\r\nconst AtrcPostExcerpt = (props, ref) => {\r\n\tconst {\r\n\t\tpostType,\r\n\t\tpostId,\r\n\t\thtmlTag,\r\n\t\texcerptLength = 55,\r\n\t\twordCountType = 'w',\r\n\t\t...defaultProps\r\n\t} = props;\r\n\r\n\tconst [\r\n\t\trawExcerpt,\r\n\t\t// eslint-disable-next-line no-unused-vars\r\n\t\tsetExcerpt,\r\n\t] = useEntityProp('postType', postType, 'excerpt', postId);\r\n\r\n\t/**\r\n\t * The excerpt length setting needs to be applied to both\r\n\t * the raw and the rendered excerpt depending on which is being used.\r\n\t */\r\n\tconst rawOrRenderedExcerpt = rawExcerpt.trim();\r\n\r\n\tlet trimmedExcerpt = '';\r\n\tif (wordCountType === 'w') {\r\n\t\ttrimmedExcerpt = rawOrRenderedExcerpt.split(' ', excerptLength).join(' ');\r\n\t} else if (wordCountType === 'ce') {\r\n\t\t/*\r\n\t\t * 1. Split the excerpt at the character limit,\r\n\t\t * then join the substrings back into one string.\r\n\t\t * 2. Count the number of spaces in the excerpt\r\n\t\t * by comparing the lengths of the string with and without spaces.\r\n\t\t * 3. Add the number to the length of the visible excerpt,\r\n\t\t * so that the spaces are excluded from the word count.\r\n\t\t */\r\n\t\tconst excerptWithSpaces = rawOrRenderedExcerpt\r\n\t\t\t.split('', excerptLength)\r\n\t\t\t.join('');\r\n\r\n\t\tconst numberOfSpaces =\r\n\t\t\texcerptWithSpaces.length - excerptWithSpaces.replaceAll(' ', '').length;\r\n\r\n\t\ttrimmedExcerpt = rawOrRenderedExcerpt\r\n\t\t\t.split('', excerptLength + numberOfSpaces)\r\n\t\t\t.join('');\r\n\t} else if (wordCountType === 'ci') {\r\n\t\ttrimmedExcerpt = rawOrRenderedExcerpt.split('', excerptLength).join('');\r\n\t}\r\n\r\n\tconst isTrimmed = trimmedExcerpt !== rawOrRenderedExcerpt;\r\n\r\n\tconst excerptContent = !isTrimmed\r\n\t\t? rawOrRenderedExcerpt || __('No excerpt found', 'atrc-prefix-atrc')\r\n\t\t: trimmedExcerpt;\r\n\r\n\treturn (\r\n\t\t<AtrcWrap\r\n\t\t\t{...defaultProps}\r\n\t\t\tref={ref}\r\n\t\t\ttag={htmlTag}>\r\n\t\t\t{excerptContent}\r\n\t\t</AtrcWrap>\r\n\t);\r\n};\r\nexport default forwardRef(AtrcPostExcerpt);\r\n"],"mappings":"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"}